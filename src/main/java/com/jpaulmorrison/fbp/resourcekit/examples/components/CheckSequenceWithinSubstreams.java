/*
 * JavaFBP - A Java Implementation of Flow-Based Programming (FBP)
 * Copyright (C) 2009, 2016 J. Paul Morrison
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, see the GNU Library General Public License v3
 * at https://www.gnu.org/licenses/lgpl-3.0.en.html for more details.
 */
package com.jpaulmorrison.fbp.resourcekit.examples.components;

import com.jpaulmorrison.fbp.core.engine.Component;
import com.jpaulmorrison.fbp.core.engine.ComponentDescription;
import com.jpaulmorrison.fbp.core.engine.InPort;
import com.jpaulmorrison.fbp.core.engine.InputPort;
import com.jpaulmorrison.fbp.core.engine.OutPort;
import com.jpaulmorrison.fbp.core.engine.OutputPort;
import com.jpaulmorrison.fbp.core.engine.Packet;

/**
 * This is is an ad hoc check program, checking that the IPs within each
 * substream are in descending order, and the right number in each substream -
 * assuming they were generated by GenSS...
 */
@ComponentDescription("Check IP sequence within substreams")
@OutPort(value = "OUT", optional = true)
@InPort("IN")
public class CheckSequenceWithinSubstreams extends Component {

	private InputPort inport;

	private OutputPort outport;

	@Override
	protected void execute() {

		Packet p;
		int seq = -2;
		int count = 0;

		while (null != (p = inport.receive())) {
			if (p.getType() == Packet.OPEN) {
				if (seq != -2) {
					System.out.println("Stream out of sequence - case 1");
					return;
				}
				seq = -1;
				count = 5;

			} else if (p.getType() == Packet.CLOSE) {
				if (seq < 0) {
					System.out.println("Stream out of sequence - case 2");
					return;
				}
				if (count != 0) {
					System.out.println("Wrong number of IPs in substream");
					return;
				}
				seq = -2;

			} else {
				String s = (String) p.getContent();
				int i = s.indexOf("abcd");
				int j = Integer.parseInt(s.substring(0, i));
				if (seq == -1) {
					// System.out.println("1st of substream " + j + ": " + s);
					seq = j;
				} else {
					if (j != seq - 1) {
						System.out.println("Stream out of sequence - case 3");
						return;
					}
					seq = j;
				}
				count--;
			}

			if (outport.isConnected())
				outport.send(p);
			else
				drop(p);
		}
	}

	@Override
	protected void openPorts() {

		inport = openInput("IN");

		outport = openOutput("OUT");

	}
}
